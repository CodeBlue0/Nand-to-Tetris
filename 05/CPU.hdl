// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

// A code 0~~~~~~ : ~만큼 A에 들어감
// C code 111accccccdddjjj :
// a : 계산시 A대신 M
// c : ALU에 넣을 계산의 방법
// d : dest 각각 ADM
// j : jump 각각 < = >

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//controlA : A 코드일때만 instruction 선택
	Not(in=instruction[15], out=Acode);
    Mux16(a=ALUoutput, b=instruction, sel=Acode, out=goA);
	
	Or(a=Acode, b=instruction[5], out=ALoad);
	ARegister(in=goA, load=ALoad, out=goPC, out[0..14]=addressM);
	
	And(a=instruction[15], b=instruction[4], out=DLoad);
	DRegister(in=ALUoutput, load=DLoad, out=goALUX, out=DRegister);
	
	Mux16(a=goPC, b=inM, sel=instruction[12], out=goALUY);	
	
	ALU(x=goALUX, y=goALUY,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		out=ALUoutput,
		out=outM,
		zr=zr,ng=ng);
	
	And(a=instruction[3], b=instruction[15], out=writeM);
	And(a=instruction[2], b=ng, out=PCLoadA);
	And(a=instruction[1], b=zr, out=PCLoadB);
	
	Or(a=ng, b=zr, out=ngOrzr);
	Not(in=ngOrzr, out=Nornrzr);
	
	And(a=instruction[0], b=Nornrzr, out=PCLoadC);
	Or(a=PCLoadA, b=PCLoadB, out=PCLoadAB);
	Or(a=PCLoadAB, b=PCLoadC, out=PCLoadABC);
	And (a=instruction[15], b=PCLoadABC, out=PCLoad);
	
	PC(in=goPC, load=PCLoad, inc=true, reset=reset, out[0..14]=pc);
}