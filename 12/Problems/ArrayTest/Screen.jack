// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int color;

    /** Initializes the Screen. */
    function void init() {
        let color = 1;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var addr;
        let addr = 16384;
        while ((addr < 16384 + 8192) | (addr = 16384 + 8192)) {
            Memory.poke(addr, 0);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
        } else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, value, i, detx, pos;
        let addr = 16384 + (32 * y) + (x / 16);
        value = Memory.peek(addr);

        let i = 0;
        let pos = 1;
        detx = x - ((x / 16) * 16);
        while (i < detx) {
            let i = i + 1;
            let pos = pos + pos;
        }
        if (color = 0) {
            let value = value & (~pos);
        } else {
            let value = value | pos;
        }
        
        do Memory.poke(addr, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var a, b, diff, dx, dy;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        while (((a < dx) | (a = dx)) & (b < dy) | (b = dy)) {
            do Screen.drawPixel(x + a, y + b);

            if (diff < 0) {a = a + 1; diff = diff + dy;}
            else {b = b + 1; diff = diff - dx;}
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        let dy = 0;
        while ((y1 + dy < y2) | (y1 + dy = y2)) {
            Screen.drawLine(x1, y1 + dy, x2, y1 + dy);
            let dy = dy + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, a, b, c;
        let dy = -r;
        while ((dy < r) | (dy = r)) {
            let a = (x - (Math.sqrt((r * r) - (dy * dy))));
            let b = (x + (Math.sqrt((r * r) - (dy * dy))));
            let c = y + dy;
            do Scree.drawLine(a, c, b, c);
            let dy = dy + 1;
        }
        return;
    }
}
