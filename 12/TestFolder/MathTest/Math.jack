// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {   
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handle sit by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, flag;
        let sum = 0;
        let shiftedX = x;
        let i = 1;
        let flag = 1;

        if (y < 0) {
            let flag = -1;
            let y =  -y;
        }

        while ((i > 0) & ((i < y) | (i = y))) {
            if (~((y & i) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + i;
        }

        if (flag = -1) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, tmp, flag;
        let flag = 0;
        if (x < 0) {
            let x = -x;
            let flag = 1;
        }
        if ((y > x) | (y < 0)) { return 0; }
        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            let tmp = 2 * q;
            if (flag = 1) {
                let tmp = -tmp;
            }
            return tmp;
        } else {
            let tmp = 2 * q + 1;
            if (flag = 1) {
                let tmp = -tmp;
            }
            return tmp;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, tmp ,j;
        let i = Math.min(x / 2 - 1, 15);
        let y = 0;
        while ((i > 0) | (i = 0)) {
            let j = 1;
            let tmp = 1;
            while (j < i) {
                let tmp = tmp + tmp;
                let j = j + 1;
            }
            if (((y + tmp) * (y + tmp) > 0) & (((y + tmp) * (y + tmp) < x) | ((y + tmp) * (y + tmp) = x))){
                let y = y + tmp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
